/* Using placeholders to handle the states */
/* Doing this we DRY these behavior, we actually don't want the following code */
/* to be a classname but a placeholder we can include where needed */
%show-spinning-circle-animation {
  animation: fadein 0.25s 0.90s linear;
  animation-fill-mode: forwards;
  
  &::before {
    animation-play-state: running;
 } 
}

%hide-spinning-circle-animation {
  opacity: 1;
  animation: fadeout 0.25s 0.40s linear;
  animation-fill-mode: forwards;
  
  &::before {
    /* Using an animation to fadeout the animated element without stopping its spinning */
    /* until its get faded out. Providing a smooth experience to the user (visually) */
    //Add a timed function here
    animation-play-state: running;

    animation: rotate 0.5s 1.15s infinite linear, stop-rotation 0.5s 5.0s infinite linear;
    animation-fill-mode: forwards;
 } 
}

%show-decision-state-animation {}
%hide-decision-state-animation {}

/* Handling the states directly in a single code block. DRY */
[class^="state-indicator"],
[class*=" state-indicator"] {
  &.loading, 
  &[data-state="loading"] {
    pointer-events: none;
    user-select: none;
  }
}

/* Wrapper when the preloader is used in an already existing element. */
/* Please notice we have special cases, like buttons */
.state-indicator-container {
  position: relative;
  z-index: $zindex-default;

  &::before {
    content: '';
    opacity: 0;
    display: block;
    background-color: $state-indicator-default-background-color;

    @include full-overlay($position: absolute, $fullscreen: false);
    @include brand-transition(opacity, 0.5s);
  }

  &::before,
  & > .state-indicator {
    z-index: $zindex-floating;
  }

  & > .state-indicator {
    @include element-location(top-left);
  }

  &.transparent::before {
    background-color: transparent;
  }

  &.fullscreen {
    justify-content: center;
    text-align: -webkit-center;
    position: relative;
    overflow: hidden;

    &.loading,
    &[data-state="loading"] {
      @include centered-content(flex);
      @include full-overlay($fullscreen: true);
      pointer-events: initial;
    }

    & > .state-indicator {
      animation: increasing-size 1.0s 4.0s;
      animation-fill-mode: forwards;
      opacity: 1;

      top: initial;
      left: initial;

      &::before {
        display: none;
      }

      & .state-indicator-animation {
        margin-bottom: $state-indicator-default-padding * 1.5;

        &::before,
        &::after {
          content: '';
          display: block;
          position: relative;
          background-color: $state-indicator-default-spinning-circle-color;
        }

        &::before {
          height: $state-indicator-default-padding / 2;
          animation: pulling-from-bottom 0.5s,
                     bouncing-line-width 2.0s 0.5s ease-in-out,
                     turn-line-into-circle 2.0s 2.0s,
                     from-square-to-circle-loop 2.88s 2.75s cubic-bezier(0.75, 0, 0.5, 1) infinite normal;

          animation-fill-mode: forwards;
        }

        &::after {
          opacity: 0;
          height: $state-indicator-default-padding;
          width: $state-indicator-default-spinning-circle-size;

          border-radius: 50%;
          margin-bottom: $state-indicator-default-padding;
          bottom: -$state-indicator-default-padding;
          animation: accelerated-fadein 1.0s 2.5s, scale-down 2.88s 2.8s cubic-bezier(0.75, 0, 0.5, 1) infinite normal;
          animation-fill-mode: forwards;
        }
      }
    }
  }
}

/* We don't want this classname nested in the "state-indicator-container" */
/* since the preloaders can be used as a standalone element */
//transition: background-color 0.15s ease-in, opacity 0.10s 0.5s ease-in;
.state-indicator {
  display: flex;
  flex-direction: initial;
  align-items: center;

  position: relative;
  height: initial;
  width: 100%;
  opacity: 0;

  &.centered {
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100%;

    &::before {
      margin: 0;
      margin-bottom: $state-indicator-default-padding;
    }
  }

  &.right-top,
  &.right-center,
  &.right-bottom {
    flex-direction: row-reverse;
    align-items: center;

    &::before {
      margin: 0;
      margin-left: $state-indicator-default-padding;
    }
  }

  &.left-center,
  &.right-center {
    height: 100%;
  }

  &.left-bottom,
  &.right-bottom {
    top: initial;
    bottom: 0;
  }

  &::before {
    content: '';
    display: inline-block;
    margin-right: $state-indicator-default-padding;
    height: $state-indicator-default-spinning-circle-size;
    width: $state-indicator-default-spinning-circle-size;

    border-radius: 100%;
    border: 2px solid $state-indicator-default-spinning-circle-background-color;
    border-top-color: $state-indicator-default-spinning-circle-color;

    animation: rotate 0.5s 1.15s infinite linear;
    animation-fill-mode: forwards;
    animation-play-state: paused;
  }

  &.loading,
  &[data-state="loading"] {
    @extend %show-spinning-circle-animation;
  }

  &.done,
  &[data-state="done"] {
    @extend %hide-spinning-circle-animation;  
  }
}

.state-indicator-container.loading,
.state-indicator-container[data-state="loading"] {
  &::before {
    opacity: 0;
    @include simple-property-animation(state-indicator-container-fadein,
             opacity, 0, $state-indicator-default-background-opacity);

    animation-timing-function: linear;
    animation-duration: 0.50s;
    animation-delay: 0.25s;
    animation-fill-mode: forwards;
  }

  & > .state-indicator {
    @extend %show-spinning-circle-animation;
  }
}

.state-indicator-container.done,
.state-indicator-container[data-state="done"] {
  &::before {
    opacity: $state-indicator-default-background-opacity;
    @include simple-property-animation(state-indicator-container-fadeout,
             opacity, $state-indicator-default-background-opacity, 0);

    animation-timing-function: linear;
    animation-duration: 0.50s;
    animation-delay: 0.35s;
    animation-fill-mode: forwards;
  }

  & > .state-indicator {
    @extend %hide-spinning-circle-animation;
  }
}

// Moving one level down (presumably the lowest level) the blocking elements
// when they are not needed (a state different to a "loading" state)
.state-indicator-container:not(.loading):not([data-state="loading"]) {
  &::before,
  & > .state-indicator {
    z-index: $zindex-disabled;
    transition: z-index 0.75s step-end;
  }
}

// Helper classname when the fullscreen preloader is not located directed
// as a children of <body>
.fullscreen-preloader {
  pointer-events: none;
  overflow: hidden;
}

/* State indicator optimization for button elements */
.btn.state-indicator-container {
  & > .state-indicator {
    top: 0;
    bottom: 0;
    padding: inherit;

    &.centered {
      flex-direction: initial;

      &::before {
        margin: 0;
        height: $state-indicator-condensed-circle-size;
        width: $state-indicator-condensed-circle-size;
      }
    }
  }
}

// The following animations are used by the preloader sequence,
// in some areas we use hardcoded values (sizes)
// Animation with a fade in and a little bounce from the bottom to its default position
@keyframes pulling-from-bottom {
  0%, 100% { width: $state-indicator-fullscreen-initial-animation-width; }
  0% {
    opacity: 0.25;
    margin-bottom: -$state-indicator-default-padding;
  }
}

// Animation for the "preloader" option, animates a line that later turns into a circle
@keyframes bouncing-line-width {
         0% { width: $state-indicator-fullscreen-initial-animation-width; }
         6% { width: $state-indicator-fullscreen-initial-animation-width * 0.40; }
         8% { width: $state-indicator-fullscreen-initial-animation-width * 0.10; }
        15% { width: $state-indicator-fullscreen-initial-animation-width * 0.15; }
  20%, 100% { width: $state-indicator-fullscreen-initial-animation-width * 0.10; }
}

// Converts a line into a rounded square, in preparation for its transformation to a circle
@keyframes turn-line-into-circle {
          0% { width: 10px; height: 10px; border-radius: 10%; }
   25%, 100% { width: 25px; height: 25px; border-radius: 10%; }
}

@keyframes increasing-size {
  25%, 100% {
    width: $state-indicator-default-spinning-circle-size;
    height: $state-indicator-default-spinning-circle-size;
  }
}

// Animates the transformation from a square element to its circled shape
@keyframes from-square-to-circle-loop {
   50% { border-radius: 50%; transform: scale(0.5) rotate(360deg); }
  100% { transform: scale(1) rotate(720deg); }
}


/* Being this specific since bootstrap rules are doing this */
/* This code is not related to preloaders, maybe not the best place to leave it (?) */
.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {
  border-top-left-radius: $size-xxs;
  border-bottom-left-radius: $size-xxs;
}

.btn-group > .btn:last-child:not(:first-child),
.btn-group > .dropdown-toggle:not(:first-child) {
  border-top-right-radius: $size-xxs;
  border-bottom-right-radius: $size-xxs;
}

.btn-group > .btn:hover,
.btn-group > .btn:focus,
.btn-group > .btn:active,
.btn-group > .btn.active,
.btn-group-vertical > .btn:hover,
.btn-group-vertical > .btn:focus,
.btn-group-vertical > .btn:active,
.btn-group-vertical > .btn.active {
  z-index: initial;
}

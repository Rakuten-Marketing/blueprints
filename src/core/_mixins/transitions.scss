// TODO: after audit we will review a model where we can specify
// reusable/shared values for animation' duration 
@mixin interactions-bouncing-bottom-line($height: $size-xxs, $color: $brand-primary, $duration: 0.5s) {
  &::after {
    content: '';
    display: block;
    width: 100%;
    height: $height;
    background-color: $color;

    // TODO: Dynamically creating the keyframe animation
    // User case: We would like to specify that height/size increase dynamically
    animation: increasing-height $duration;
    animation-fill-mode: forwards;
    position: absolute;
    bottom: 0;
    left: 0;
  }
}

@mixin brand-transition($property, $time: 100ms) {
  transition: $property $time cubic-bezier(0.5, 0, 0.5, 1);
}

@keyframes accelerated-fadein {
   0% { opacity: 0.00; }
  50% { opacity: 0.10; }
  75% { opacity: 0.25; }
 100% { opacity: 0.25; }
}

@keyframes fadein {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeout {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes scale-down {
  50% { transform: scale(0.5); }
}

@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
}

@mixin simple-property-animation($name, $property, $from, $to) {
  @keyframes #{$name} {
    from {
      #{$property}: $from;
    }
    to {
      #{$property}: $to;
    }
  }

  animation: $name;
}

@keyframes stop-rotation {
  100% {
    transform: none;
  }
}

@keyframes increasing-height {
   0% { height: 0px; }
  50% { height: $size-xs; }
}

@keyframes increasing-width {
   0% { width: 0px; }
  50% { width: $size-xs; }
}
/* Navbar.component variables */
$navbar-overlay-background-color: $brand-gray-dark !default;
$navbar-overlay-opacity: $disabled-element-opacity !default;

$navbar-background-color: $brand-white !default;
$navbar-fixed-height: 80px !default;
$navbar-padding: $size-xxs !default;
$navbar-condensed-padding: $size-xs !default;

$navbar-border-color: $brand-shadow-color !default;
$navbar-text-color-default: inherit !default;
$navbar-text-color-focused: $brand-primary !default;

$navbar-item-background-color-default: transparent !default;
$navbar-item-background-color-focused: $brand-gray-lighter !default;
$navbar-item-width: 100px !default;

// - Opportunity area -:
// Bootstrap{source} not following the OCSS pattern
// There is no reason for Bootstrap to play with the margin of this element
// The following 4 lines of code are because the _navbar.scss file modifies them,
// this should not be the case. We will move away that file in next iterations.
.navbar > .container .navbar-brand,
.navbar > .container-fluid .navbar-brand {
  margin: 0;
}

.navbar {
  // - Opportunity area -:
  // Bootstrap{source} not following the OCSS pattern
  // The following 4 lines of code are because the _navbar.scss file modifies them,
  // this should not be the case. We will move away that file in next iterations.
  height: initial;
  min-height: initial;
  margin: 0;
  border: none;

  @extend %flex-columns;
  color: $navbar-text-color-default;

  &:not(.transparent) {
    background-color: $navbar-background-color;
  }

  // Images inside the navbar element must be forced to the
  // 100% height as their max-height. Images can be present anywhere inside this element
  img {
    @include object-fit();
    @extend %image-rendering;
  }

  a,
  button,
  .navbar-button {
    @extend .btn-flat;

    display: flex;
    color: inherit;
    height: 100%;
    align-items: center;
    cursor: pointer;

    &:hover,
    &:focus {
      text-decoration: none;
    }
  }

  // Aiming the direct children here.
  // In the "perfect world" we would have only one container
  & > .navbar-container {
    display: flex;
    white-space: nowrap;
    justify-content: flex-start;

    &.center {
      justify-content: center;
    }

    &.right {
      justify-content: flex-end;
    }
  }

  .navbar-section {
    display: flex;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: flex-start;

    height: inherit;
    padding: $navbar-padding;

    &:first-of-type {
      padding-left: 0;
      justify-content: flex-start;
    }

    &:last-of-type {
      padding-right: 0;
      justify-content: flex-end;
    }
  }

  .navbar-collapsible {
    display: none;
  }

  // Aiming the classname variations, doing this we can select "navbar-brand", "navbar-brand-text"
  // "navbar-brand-img" and "navbar-brand-custom" without actually declaring.
  // For more information please refer to "CSS class prefix/suffix"
  [class^="navbar-brand"],
  [class*=" navbar-brand"] {
    // - Opportunity area -:
    // Bootstrap{source} not following the OCSS pattern
    // There is no reason for Bootstrap to play with the following properties of this element
    // The following 3 lines of code are because the _navbar.scss file modifies them,
    // this should not be the case. We will move away that file in next iterations.
    float: none;
    font-size: inherit;
    line-height: normal;

    // This should be a value coming from $navbar-padding, using a sizes.scss value
    // won't have the eye-candy behavior we are looking for
    &:first-child:nth-last-child(2) {
      margin-right: $navbar-padding * 2;
    }
  }

  .navbar-brand-text {
    text-align: initial;
    position: relative;

    &::before {
      content: '';
      height: 100%;
      display: block;
      position: absolute;
      top: 0;

      margin-left: -#{$navbar-padding};
      border-left: 1px solid $navbar-border-color;
    }
  }

  .navbar-side {
    flex-basis: 20%;
  }

  .navbar-center {
    flex-basis: 100%;
    justify-content: center;
    transition: opacity 0.5s 0.25s linear;
  }

  .navbar-list {
    display: flex;
    height: inherit;

    // - Opportunity area -:
    // Bootstrap{source} not following the OCSS pattern
    // There is no reason for Bootstrap to play with the following properties of this element
    // The following 2 lines of code are because the _navs.scss file modifies them,
    // this should not be the case. We will move away that file in next iterations.
    padding: 0;
    margin: 0;

    & .navbar-list-item {
      display: flex;
      height: inherit;
      align-items: center;
      background-color: $navbar-item-background-color-default;

      &:not(.disabled-animation) {
        &:hover,
        &:focus,
        &.active {
          color: $navbar-text-color-focused;
          background-color: $navbar-item-background-color-focused;
          @include interactions-bouncing-bottom-line($height: $size-xxs, $color: $navbar-text-color-focused);
        }
      }
      
      &.submenu-indicator .navbar-icon::after {
        content: '';
        margin-top: $size-xxs;
        margin-left: $size-xxs;

        @extend .caret-down;
        @extend .transform-centering;
      }

      &.active.submenu {
        @include interactions-bouncing-bottom-line($height: 0);
      }

      &:not(.variable-width) {
        width: $navbar-item-width;
        max-width: $navbar-item-width + ($navbar-padding * 2);
      }

      a,
      button,
      .navbar-button {
        @extend .btn-flat;
        flex-direction: column;
        justify-content: center;
        padding: $navbar-padding;
        overflow: hidden;
        width: 100%;
      }

      button {
        // This HTMLelement cannot be a flex container in some browsers
        // Strict rule: the idea is to maintain a level of common sense when styling HTML elements.
        &::before,
        &::after {
          content: '';
          flex: 1 0 auto;
        }
      }
    }
  }

  .navbar-toolbar {
    height: initial;

    // Aiming the classname variations, doing this we can select all variations having this as
    // prefix or suffix without actually declaring.
    // For more information please refer to "CSS class prefix/suffix"
    & > [class^="navbar-list-"],
    & > [class*=" navbar-list-"] {
      margin-right: $navbar-padding;

      &:only-child,
      &:last-child {
        margin-right: 0;
      }
    }

    & .navbar-list-separator {
      border-right: 1px solid $navbar-border-color;
    }
  }

  .navbar-icon {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    font-size: 120%;

    &:first-child:nth-last-child(2) {
      margin-bottom: $navbar-padding;
    }
  }
}


/* --- Navbar variations --- */
/* ------------------------- */
.navbar-condensed {
  background-color: transparent;

  &:not(.transparent) {
    background-color: $navbar-item-background-color-focused;
  }

  .navbar-list {
    & .navbar-list-item {
      // For this items (since we are using the condensed variation) we wouldn't like
      // high values for margin (we have padding already). We do *1.5 to add 0.5x each side
      padding: $navbar-condensed-padding 0;
      margin: 0 $navbar-condensed-padding * 1.5;

      &:first-of-type {
        margin-left: 0;
      }

      &:last-of-type {
        margin-right: 0;
      }

      &:not(.disabled-animation) {
        &:hover,
        &:focus,
        &.active {
          @include interactions-bouncing-bottom-line($height: $size-xxs, $color: $navbar-text-color-focused);
          background-color: transparent;
        }
      }

      a,
      button,
      .navbar-button {
        padding: 0 $navbar-padding;
      }
    }
  }
}

.navbar-bordered {
  border: 1px solid $navbar-border-color;
}

// Aiming the classname variations, doing this we can select all variations having this as
// prefix or suffix without actually declaring.
// For more information please refer to "CSS class prefix/suffix"
[class^="navbar-fixed-"],
[class*=" navbar-fixed-"] {
  position: fixed;
  border: none;
  z-index: 2;
}

.navbar-fixed-top,
.navbar-fixed-bottom {
  right: 0;
  left: 0;

  & > .navbar-container {
    height: $navbar-fixed-height;
  }
}

.navbar-fixed-top {
  top: 0;
  border-bottom: 1px solid $navbar-border-color;
}

.navbar-fixed-bottom {
  bottom: 0;
  border-top: 1px solid $navbar-border-color;
}

// Responsiveness.
// MediaQueries for the .navbar element
@media (max-width: $screen-sm) {
  .navbar {
    & > .navbar-container {
      width: 100%;
    }

    // Moving the logo and company's name to the center and forcing it to use
    // the 100% of the available space
    [class^="navbar-brand"],
    [class*=" navbar-brand"] {
      justify-content: center;
      flex-basis: 100%;
    }

    .navbar-collapsible {
      display: inherit;
      z-index: 1;
    }

    .navbar-side:not(.navbar-brand) {
      position: absolute;
      padding-left: inherit;
      padding-right: inherit;

      &:first-of-type {
        left: 0;
      }

      &:last-of-type {
        right: 0;
      }
    }

    // Moving the main menu for the "dashboard" model for this element
    // Creating an "offcanvas" behavior
    &[class^="navbar-fixed-"],
    &[class*=" navbar-fixed-"] {
      .navbar-center {
        display: flex;
        align-items: baseline;
        position: absolute;

        width: $navbar-item-width;
        height: 100vh;
        padding: 0;
        left: -#{$navbar-item-width};
        border-right: 1px solid $navbar-border-color;
        background-color: $navbar-background-color;
        transition: left 0.21s linear;

        .navbar-list {
          margin-top: $navbar-fixed-height;
          flex-flow: column wrap;
          width: 100%;
          height: initial;

          & .navbar-list-item {
            font-size: 90%;
            padding: $navbar-padding;

            &:not(.disabled-animation):hover::after,
            &:not(.disabled-animation):focus::after,
            &:not(.disabled-animation).active::after {
              animation: increasing-width 0.5s;
              width: $size-xxs;
              height: 100%;
              left: initial;
              right: -1px;
            }
          }
        }
      }

      &::after {
        display: block;
        background-color: $navbar-overlay-background-color;
        transition: opacity 0.5s 0.15s linear;
        z-index: -1;
        opacity: 0;
      }

      &.open {
        &::after {
          content: '';
          opacity: $navbar-overlay-opacity;
          @include full-overlay($position: fixed, $fullscreen: false);
        }

        & .navbar-side:not(.navbar-collapsible) {
          z-index: -1;
        }

        .navbar-center {
          left: 0;
          box-shadow: 4px 0 12px -4px $navbar-overlay-background-color;
        }
      }    
    }
  }
}
/* --- Placeholders for easy maintenance and migration for replacing animations coming from BP2. --- */
// Using placeholders to allow this component to get a better scalable and maintainable state
// Technically we will perform only two actions for each element: "show" and "hide"

/* --- Scenario: The animation/spinner is inside a container --- */
/* We can replace the animations/transitions when BP2.0 have them */
%show-state-indicator-container-background {
  &::before {
    opacity: $state-indicator-default-background-opacity;
    z-index: $zindex-floating;
    transition: opacity 0.55s 0.25s linear;
  }
}

%hide-state-indicator-container-background {
  &::before {
    opacity: 0;
    z-index: $zindex-disabled;
    transition: opacity 0.55s 0.25s linear, z-index 0.80s step-end;
  }
}

%show-state-indicator-container-element {
  .state-indicator {
    opacity: 0;
    z-index: $zindex-floating;
    animation: fadein 0.5s 0.20s ease-in;
    animation-fill-mode: both;
    transition: unset;
    
    .state-indicator-message {
      animation: push-down 0.35s 0.20s cubic-bezier(0.75, 0, 0.5, 1);
      animation-fill-mode: both;
    }
  }
}

%hide-state-indicator-container-element {
  .state-indicator {
    opacity: 1;
    animation: fadeout 0.5s 0.20s ease-in;
    animation-fill-mode: both;
    z-index: $zindex-disabled;
    
    .state-indicator-message {
      animation: push-up 0.35s 0.20s cubic-bezier(0.75, 0, 0.5, 1);
      animation-fill-mode: both;
    }
  }
}

%show-state-indicator-animation {
  .state-indicator-animation {
    &:not(.morphing-bubble-animation)::before {
      animation: rotate 0.5s 0.75s infinite linear;
      animation-fill-mode: both;
    }

    &.morphing-bubble-animation {
      &::before {
        animation: bouncing-line-width 2.1s 0.35s ease-in-out,
                   turn-line-into-circle 1.50s 1.10s,
                   from-square-to-circle-loop 2.88s 1.75s cubic-bezier(0.75, 0, 0.5, 1) infinite normal;
        animation-fill-mode: forwards;
      }

      &::after {
        opacity: 0;
        animation: accelerated-fadein 0.8s 1.15s ease-in,
                   scale-down 2.88s 1.8s cubic-bezier(0.75, 0, 0.5, 1) infinite normal;
        animation-fill-mode: forwards;
      }
    }
  }
}

%hide-state-indicator-animation {
  .state-indicator-animation {
    &:not(.morphing-bubble-animation)::before {
      opacity: 1;
      animation: fadeout 0.45s linear forwards, rotate 0.5s 0.75s infinite linear, stop-rotation 0.5s 2.0s infinite linear;
      animation-play-state: running;
    }

    &.morphing-bubble-animation {
      opacity: 1;
      animation: fadeout 0.45s linear forwards;
      animation-play-state: running;
    }
  }
}

.disable-interaction {
  overflow: hidden;

  &,
  & input,
  & button {
    user-select: none;
    pointer-events: none;
  }
}

// Disabling the element for all the "busy" states
[class*="state-indicator"] {
  &.loading,
  &.decision,
  &.exception {
    @extend .disable-interaction;
  }
}

.state-indicator {
  z-index: $zindex-disabled;
  @include element-location(top-left);

  opacity: 0;
  transition: opacity 0.55s 0.15s linear, z-index 0.80s step-end;
  display: inline-flex;
  text-align: center;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;

  // Alignment options
  &[class^="right-"],
  &[class*=" right-"] {
    justify-content: initial;
    flex-direction: row-reverse;

    .state-indicator-message {
      margin-right: $state-indicator-default-padding;
    }
  }

  &[class^="left-"],
  &[class*=" left-"] {
    justify-content: initial;
    flex-direction: row;

    .state-indicator-message {
      margin-left: $state-indicator-default-padding;
    }
  }

  &[class*="-top"],
  &[class*="-bottom"] {
    height: initial;
  }

  &.left-center,
  &.right-center {
    align-items: center;
    height: 100%;
  }

  &.left-bottom,
  &.right-bottom {
    top: initial;
    bottom: 0;
  }

  .state-indicator-message { position: relative; }
  .state-indicator-animation {
    &::before {
      content: '';
      display: inline-block;
    }

    &:not(.morphing-bubble-animation)::before {
      height: $state-indicator-default-spinning-circle-size;
      width: $state-indicator-default-spinning-circle-size;

      border-radius: 100%;
      border: 2px solid $state-indicator-default-spinning-circle-background-color;
      border-top-color: $state-indicator-default-spinning-circle-color;
    }

    &.morphing-bubble-animation {
      &::before,
      &::after {
        content: '';
        background-color: $state-indicator-default-spinning-circle-color;
      }

      &::before {
        height: $state-indicator-default-padding / 2;
        margin: $size-s 0;
      }

      &::after {
        display: block;
        height: $state-indicator-default-padding;
        width: $state-indicator-default-spinning-circle-size;

        border-radius: 50%;
        margin: 0 auto $state-indicator-default-padding;
      }
    }
  }
}

.state-indicator-container {
  z-index: $zindex-default;
  position: relative;
  word-break: break-word;

  &::before {
    content: '';
    display: block;
    background-color: $state-indicator-default-background-color;
    transition: opacity 0.55s linear, z-index 0.1s 1.81s step-end;
    @include full-overlay($position: absolute, $fullscreen: false);

    z-index: $zindex-disabled;
    opacity: 0;
  }

  &.transparent::before { background-color: transparent; }
  &.standalone { min-height: $state-indicator-fullscreen-initial-animation-width; }
  &.fullscreen {
    @include full-overlay($position: absolute, $fullscreen: true);
  }

  &.decision,
  &.exception,
  &.loading {
    @extend %show-state-indicator-container-background;
    @extend %show-state-indicator-container-element;
  }

  &.loading .state-indicator {
    @extend %show-state-indicator-animation;
  }

  &.decision,
  &.exception {
    @extend %show-state-indicator-container-background;

   .state-indicator {
      @extend %hide-state-indicator-animation;
    }
  }

  &.done,
  &:not(.decision):not(.exception):not(.loading) {
    @extend %hide-state-indicator-container-background;
    @extend %hide-state-indicator-container-element;
    @extend %hide-state-indicator-animation;
  } 
}

// Instance for buttons
// Due the nature (and size) of these elements, we handle them separately
button.state-indicator-container {
  position: relative;

  :first-child:not(:only-child) {
    transition: opacity 0.25s linear;
  }

  // Buttons have their own spinner's size
  // They are smaller than a regular container; therefore the special scenario
  &.decision,
  &.exception,
  &.loading {
    & > .state-indicator {
      animation: fadein 0.5s 0.20s ease-in;
      animation-fill-mode: both;
    }
  }

  & > .state-indicator::before {
    content: '';
    display: inline-block;
    height: $state-indicator-condensed-circle-size;
    width: $state-indicator-condensed-circle-size;
    border: 2px solid $state-indicator-default-spinning-circle-background-color;
    border-top-color: $state-indicator-default-spinning-circle-color;
    border-radius: 100%;
    margin: 0;
  }

  &.loading {
    :first-child:not(:only-child) { opacity: 0.25; }
    > .state-indicator::before {
      animation: rotate 0.5s 0.25s infinite linear;
      animation-fill-mode: both;
    }
  }

  &.decision,
  &.exception {
    & > .state-indicator {
      animation: fadeout 0.50s 0.20s ease-in;
      animation-fill-mode: both;

      &::before {
        opacity: 1;
        animation: fadeout 0.45s linear forwards, rotate 0.5s 0.75s infinite linear, stop-rotation 0.5s 2.0s infinite linear;
        animation-play-state: running;
      }
    }
  }

  &.done,
  &:not(.decision):not(.exception):not(.loading) {
    & > .state-indicator::before {
      opacity: 1;
      animation: fadeout 0.45s linear forwards, rotate 0.5s 0.75s infinite linear, stop-rotation 0.5s 2.0s infinite linear;
      animation-play-state: running;
    }
  }
}

// CSS Rules that will only happen for the state-indicator being used without a container
.state-indicator-standalone {
  display: flex;
  flex-direction: column;
  align-items: center;
  position: initial;

  &.decision,
  &.exception,
  &.loading {
    @extend %show-state-indicator-container-background;

    opacity: 0;
    animation: fadein 0.5s 0.40s ease-in;
    animation-fill-mode: both;
    z-index: $zindex-floating;
    
    .state-indicator-message {
      animation: push-down 0.35s 0.40s cubic-bezier(0.75, 0, 0.5, 1);
      animation-fill-mode: forwards;
    }
  }

  &.loading {
    @extend %show-state-indicator-animation;
  }

  &.decision,
  &.exception {
    @extend %show-state-indicator-container-background;
    @extend %hide-state-indicator-animation;
  }

  &.done,
  &:not(.decision):not(.exception):not(.loading) {
    @extend %hide-state-indicator-container-background;
  }
}

/*--- Used animations (classname.component scope) ---*/
// The following animations are used by the preloader sequence
// These animations are used specifically by this component
@keyframes push-up {
  0% { top: 0px; }
  100% { top: -#{$state-indicator-default-spinning-circle-size * 0.15}; }
};

@keyframes push-down {
  0% { top: -#{$state-indicator-default-spinning-circle-size * 0.15}; }
  100% { top: 0px; }
}

@keyframes pulling-from-bottom {
  0% { opacity: 0.15; margin-bottom: -$state-indicator-default-padding * 1.5; }
  25% { opacity: 0.25; }
  55% { opacity: 0.50; }
  60% { opacity: 1.00; }
  0%, 100% { width: $state-indicator-fullscreen-initial-animation-width; }
}

@keyframes bouncing-line-width {
  0% { width: $state-indicator-fullscreen-initial-animation-width; }
  6% { width: $state-indicator-fullscreen-initial-animation-width * 0.40; }
  8% { width: $state-indicator-fullscreen-initial-animation-width * 0.10; }
  15% { width: $state-indicator-fullscreen-initial-animation-width * 0.15; }
  20%, 100% { width: $state-indicator-fullscreen-initial-animation-width * 0.10; }
}

@keyframes turn-line-into-circle {
  0% { width: 10px; height: $state-indicator-default-padding / 2; border-radius: 10%; }
  25%, 100% { width: 24px; height: 24px; border-radius: 10%; margin: 4px 0; }
}

@keyframes from-square-to-circle-loop {
  50% { border-radius: 50%; transform: scale(0.5) rotate(360deg); }
  100% { transform: scale(1) rotate(720deg); }
}